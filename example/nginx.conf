
worker_processes  1;
events {
    worker_connections  1024;
}

daemon off;
master_process off;
error_log   logs/error.log  debug;

http {
    include       mime.types;
    server {
        listen       80;
        server_name  localhost;

        # hello world
        # # http://localhost/mruby
        location /mruby {
            mruby_content_handler /path/to/hello.mrb;
        }

        # include mruby-json
        # http://localhost/
        location / {
            mruby_content_handler_code '
                r = Nginx::Request.new()
                r.content_type = "text/html"
                Nginx.rputs "hello ngx_mruby world!<br>"
                Nginx.rputs "content_type: #{r.content_type}<br><br>"
                Nginx.rputs "ngx_mruby_version: #{Nginx.ngx_mruby_version}<br>"
                Nginx.rputs "nginx_version: #{Nginx.nginx_version}<br>"
                Nginx.log Nginx::LOG_ERR, "ngx_mruby error!"
                Nginx.return Nginx::HTTP_OK
            ';
        }

        # headers
        # http://localhost/headers
        location /headers {
            mruby_content_handler_code '
                r = Nginx::Request.new()
                r.content_type = "text/html"
                h = Nginx::Headers_in.new()
                Nginx.rputs "headers: #{h.headers_in_hash}<br><br>"
                Nginx.return Nginx::HTTP_OK
            ';
        }

        # vars
        # http://localhost/vars?version=hello
        location /vars {
            set $foo "mruby";
            mruby_content_handler_code '
                r = Nginx::Request.new()
                r.content_type = "text/html"
                Nginx.rputs "version => #{r.var.arg_version}<br>"
                Nginx.rputs "host => #{r.var.host}<br>"
                Nginx.rputs "foo => #{r.var.foo}<br>"
                Nginx.rputs "uri => #{r.var.uri}<br>"
                Nginx.rputs "user_agent => #{r.var.http_user_agent}<br>"
                Nginx.return Nginx::HTTP_OK
            ';
        }

        # redirect
        # http://localhost/redirect?url=http://163.com
        location /redirect {
            mruby_rewrite_handler_code '
                r = Nginx::Request.new()
                if r.var.arg_url
                    Nginx.redirect r.var.arg_url
                else
                    Nginx.redirect "http://taobao.com", 301
                end
            ';
        }

        # internal redirect
        # http://localhost/redirect/internal?version=xxx
        location /redirect/internal {
            mruby_rewrite_handler_code '
                Nginx.redirect "/vars"
            ';
        }

        # dynamic the internal path for your business
        # http://localhost/redirect/internal/dynamic/path?path=hello
        # actually this request will served by location /static/
        location /redirect/internal/dynamic/path {
            mruby_rewrite_handler_code '
                r = Nginx::Request.new()
                dynamic_path = "/static/#{r.var.arg_path}"
                Nginx.redirect dynamic_path
            ';
        }

        location /static/ {
            alias /path/to/static/;
        }

    }
}
