worker_processes  4;
events {
    worker_connections 1024;
}

http {
    server {
        listen 8000;
        server_name localhost;

        include mime.types;
        default_type application/octet-stream;

        root www;

        location /hello {
            mruby_content_handler_code '
                r = Nginx::Request.new
                r.content_type = "text/plain";
                Nginx.rputs("Hello, World!")
                Nginx.return Nginx::NGX_HTTP_OK
            ';
        }

        location /redirect {
            mruby_rewrite_handler_code '
                Nginx.redirect "http://localhost:8000/hello", 301
            ';
        }

        location /redirect_internal {
            mruby_rewrite_handler_code '
                Nginx.redirect "/hello"
            ';
        }

        location /ctx {
            mruby_rewrite_handler_code '
                ctx = Nginx::Context.new
                ctx["count"] = 1
            ';
            mruby_access_handler_code '
                ctx = Nginx::Context.new
                ctx["count"] += 1
            ';
            mruby_content_handler_code '
                ctx = Nginx::Context.new
                ctx["count"] += 1
                Nginx.rputs(ctx["count"])
            ';
        }

        location /acl.html {
            set $access_key "bokko";
            set $secret_key "cubicdaiya";
            mruby_access_handler_code '
                r          = Nginx::Request.new
                now        = Nginx::Time.time()
                plain_text = r.method + r.uri + r.var.arg_expires.to_s + r.var.access_key.to_s
                hmac_sha1  = Nginx::Digest.hmac_sha1(plain_text, r.var.secret_key)
                signature  = Nginx::Base64.encode(hmac_sha1)
                if r.var.arg_expires.to_i < now || signature != r.var.arg_signature then
                    Nginx.return Nginx::HTTP_FORBIDDEN
                end
            ';
        }

        location /filter1.html {
           mruby_header_filter_code  "
                r = Nginx::Request.new
                r.content_type = 'text/plain'
            ";
            mruby_body_filter_code "
                '<!DOCTYPE html>\n' + ARGV[0]
            ";
        }

        location /filter2.html {
            mruby_header_filter_code  "
                r = Nginx::Request.new
                r.content_type = 'text/plain'
            ";
        }

        location /filter3.html {
            mruby_body_filter_code "
                '<!DOCTYPE html>\n' + ARGV[0]
            ";
        }

    }

}
